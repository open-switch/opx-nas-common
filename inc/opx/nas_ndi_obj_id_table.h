/*
 * Copyright (c) 2019 Dell Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
 * LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS
 * FOR A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
 *
 * See the Apache Version 2.0 License for specific language governing
 * permissions and limitations under the License.
 */

/*
 * filename: nas_ndi_obj_id_table.h
 */


/**
 * \file nas_ndi_obj_id_table.h
 * \brief NPU ID to NDI Obj ID Map to/from Opaque blob Serialize/Unserialize utility
 **/

#ifndef _NAS_NDI_OBJ_ID_TABLE_H_
#define _NAS_NDI_OBJ_ID_TABLE_H_

#include "std_error_codes.h"
#include "ds_common_types.h"
#include "cps_api_object.h"
#include "cps_api_object_attr.h"
#include "nas_types.h"

/**
 * @defgroup NASNDIObjIdTable NAS Util - NDI ObjID map serialize/unserialize
 *
 * @{
 */

#ifdef __cplusplus

#include <unordered_map>

namespace nas {

using ndi_obj_id_table_t = std::unordered_map <npu_id_t, ndi_obj_id_t>;

/**
 * Serialize the NDI Object ID table as binary data in a CPS Object attribute
 * C++ version.
 *
 * @verbatim
 * Sample usage -
 *
 *    nas::ndi_obj_id_table_t  table;
 *    t[npu_id] = ndi_obj_id;
 *    ...
 *    if (!nas::ndi_obj_id_table_cps_serialize (table, cps_obj,
 *                                              opaque_cps_attr_hierarchy,
 *                                              hierarchy_size)) {
 *         Some error while serializing
 *    }
 *    ...
 *
 * @endverbatim
 *
 * @param  table         NDI Obj Id map table that needs to be serialized
 * @param  cps_obj       CPS object into which the table needs to be serialized
 * @param  attr_id_list  CPS attribute ID hierarchy within the above CPS object
 *                         into which the obj ID table is serialized
 * @param  attr_id_size  Number of CPS attribute IDs in the hierarchy
 * @return               True if the table was successfully serialized to the CPS object
 */
bool ndi_obj_id_table_cps_serialize (const ndi_obj_id_table_t& table,
                                     cps_api_object_t cps_obj,
                                     cps_api_attr_id_t *attr_id_list,
                                     size_t attr_id_size);

/**
 * Overwrite the contents of an NPU ID to NDI Object ID map table with
 * contents generated by unserializing binary data in a CPS object attribute.
 * C++ version.
 *
 * @verbatim
 * Sample usage -
 *
 *    nas::ndi_obj_id_table_t  table;
 *    ...
 *    if (!nas::ndi_obj_id_table_cps_unserialize (table, cps_obj,
 *                                                opaque_cps_attr_hierarchy,
 *                                                hierarchy_size)) {
 *       // Something wrong while unserializing
 *    }
 *    ...
 *
 * @endverbatim
 *
 * @param  table         NDI Obj Id map table to which opaque data needs to be unserialized
 * @param  cps_obj       CPS object from which the table needs to be unserialized
 * @param  attr_id_list  CPS attribute ID hierarchy within the above CPS object
 *                         from which the obj ID table is unserialized
 * @param  attr_id_size  Number of CPS attribute IDs in the hierarchy
 * @return               True if sucessfully unserialized, else false
 */
bool ndi_obj_id_table_cps_unserialize (ndi_obj_id_table_t&  table,
                                       cps_api_object_t cps_obj,
                                       cps_api_attr_id_t *attr_id_list,
                                       size_t attr_id_size);


}

extern "C" {
#endif

/* C version of the NDI Obj Id map table */

/**
 * Handle to the table data structure that holds mapping
 * of NPU IDs to NDI object IDs
 */
typedef void* nas_ndi_obj_id_table_handle_t;

/**
 * Create an empty NPU ID to NDI Object ID map table
 * @return  Handle to empty map table
 */
nas_ndi_obj_id_table_handle_t nas_ndi_obj_id_table_create ();

/**
 * Delete table that holds mapping of NPU IDs to NDI object IDs
 * @param h  Handle to map table to be deleted
 */
void nas_ndi_obj_id_table_delete (nas_ndi_obj_id_table_handle_t h);

/**
 * Add or overwrite an NPU ID to NDI object map element to the map table
 * @param h           Handle to map table
 * @param npu_id      NPU ID for which the mapping needs to added
 * @param ndi_obj_id  Mapped NDI obj ID
 * @return            True if added to map table successfully, else false
 */
bool  nas_ndi_obj_id_table_set_id (const nas_ndi_obj_id_table_handle_t h,
                                   npu_id_t  npu_id,
                                   ndi_obj_id_t  ndi_obj_id);

/**
 * Remove an NPU ID to NDI object map element from the map table
 * @param  h       Handle to map table
 * @param  npu_id  NPU ID for which the mapping needs to removed
 * @return         true if removed from map table successfully, else false
 */
bool  nas_ndi_obj_id_table_erase_id (nas_ndi_obj_id_table_handle_t h,
                                     npu_id_t  npu_id);

/**
 * Get the NDI Obj ID mapped to the given NPU ID
 * @param       h             Handle to map table
 * @param       npu_id        NPU ID for which NDI obj ID needs to be retrieved
 * @param [out] ndi_obj_id_p  pointer to memory where retrieved NDI obj ID is filled
 * @return                    True if map element found for NPU, else false
 */
bool nas_ndi_obj_id_table_get_id (const nas_ndi_obj_id_table_handle_t h,
                                  npu_id_t  npu_id,
                                  ndi_obj_id_t* ndi_obj_id_p);

/**
 * Serialize the NDI Object ID table as binary data in a CPS Object attribute
 * C version.
 *
 * @verbatim
 * Sample usage -
 *
 *    nas_ndi_obj_id_table_handle_t h = nas_ndi_obj_id_table_create ();
 *    if (h == NULL) return ERROR;
 *    nas_ndi_obj_id_table_set_id (h, npu_id, ndi_obj_id);
 *    ...
 *    if (!nas_ndi_obj_id_table_cps_serialize (h, cps_obj,
 *                                             opaque_cps_attr_hierarchy,
 *                                             hierarchy_size)) {
 *         // Some error while serializing
 *    }
 *    ...
 *    nas_ndi_obj_id_table_delete (h);
 *
 * @endverbatim
 *
 * @param   h              Handle to NDI Obj Id map table that needs to be serialized
 * @param   cps_obj        CPS object into which the table needs to be serialized
 * @param   attr_id_list   CPS attribute ID hierarchy within the above CPS object
 *                         into which the obj ID table is serialized
 * @param   attr_id_size   Number of CPS attribute IDs in the hierarchy
 * @return                 True if the table was successfully serialized to the CPS object
 */
bool nas_ndi_obj_id_table_cps_serialize (const nas_ndi_obj_id_table_handle_t h,
                                         cps_api_object_t cps_obj,
                                         cps_api_attr_id_t *attr_id_list,
                                         size_t attr_id_size);

/**
 * Overwrite the contents of an NPU ID to NDI Object ID map table with
 * contents generated by unserializing binary data in a CPS object attribute.
 * C version.
 *
 * @verbatim
 * Sample usage -
 *
 *    nas_ndi_obj_id_table_handle_t h = nas_ndi_obj_id_table_create ();
 *    ...
 *    if (!nas_ndi_obj_id_table_cps_unserialize (h, cps_obj,
 *                                               opaque_cps_attr_hierarchy,
 *                                               hierarchy_size)) {
 *       // Something wrong while unserializing
 *    }
 *    ...
 *    nas_ndi_obj_id_table_delete (h);
 *
 * @endverbatim
 *
 * @param  h              Handle to map table to which opaque data contents need to be
 *                        unserialized
 * @param  cps_obj        CPS object from which the table needs to be unserialized
 * @param  attr_id_list   CPS attribute ID hierarchy within the above CPS object
 *                         from which the obj ID table is unserialized
 * @param  attr_id_size   Number of CPS attribute IDs in the hierarchy
 * @return                True if sucessfully unserialized, else false
 */
bool nas_ndi_obj_id_table_cps_unserialize (nas_ndi_obj_id_table_handle_t  h,
                                           cps_api_object_t cps_obj,
                                           cps_api_attr_id_t *attr_id_list,
                                           size_t attr_id_size);

#ifdef __cplusplus
}
#endif
/**
 * @}
 */
#endif /* _NAS_NDI_OBJ_ID_TABLE_H_ */
